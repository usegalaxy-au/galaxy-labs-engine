name: Build and deploy
run-name: "[${{ github.event.workflow_run.head_branch }}] ${{ github.event.workflow_run.head_commit.message }}"

on:
  workflow_run:
    workflows: ["Django tests"]
    types:
      - completed
    branches:
      - dev
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.event == 'push' && github.event.workflow_run.conclusion == 'success' }}
    environment: build
    concurrency:
      group: deploy-group-${{ github.event.workflow_run.head_branch }}
      cancel-in-progress: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.workflow_run.head_branch }}
      - run: git branch
      - run: env

      - name: Download diff artifact
        uses: actions/download-artifact@v4
        with:
          name: deployment-diff-${{ github.event.workflow_run.head_sha }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}

      - name: Check if Dockerfile or requirements.txt was changed
        id: check_dependencies
        run: |
          if [ -f dockerfile_or_requirements_changed.txt ]; then
            CHANGED=$(cat dockerfile_or_requirements_changed.txt)
            if [ "$CHANGED" = "true" ]; then
              echo "Dockerfile or requirements.txt changed"
              echo "updated=true" >> $GITHUB_OUTPUT
            else
              echo "Dockerfile or requirements.txt not changed"
              echo "updated=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "Could not find diff artifact, assuming no changes"
            echo "updated=false" >> $GITHUB_OUTPUT
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        if: steps.check_dependencies.outputs.updated == 'true'

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        if: steps.check_dependencies.outputs.updated == 'true'
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image
        if: steps.check_dependencies.outputs.updated == 'true'
        run: docker build -t ${{ secrets.DOCKER_IMAGE }}:latest .

      - name: Push Docker image
        if: steps.check_dependencies.outputs.updated == 'true'
        run: docker push ${{ secrets.DOCKER_IMAGE }}:latest

  deploy:
    runs-on: ubuntu-latest
    environment: deployment
    concurrency:
      group: deploy-group-${{ github.event.workflow_run.head_branch }}
      cancel-in-progress: true
    needs: build
    if: needs.build.result == 'success' || needs.build.result == 'skipped'

    steps:
      - name: Checkout infrastructure repo
        uses: actions/checkout@v4
        with:
          repository: usegalaxy-au/infrastructure

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'

      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible

      - name: Install ssh keys
        # For reference: https://stackoverflow.com/a/70447517
        run: |
          install -m 600 -D /dev/null ~/.ssh/galaxy
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/galaxy
          echo "${{ secrets.SSH_KNOWN_HOSTS }}" > ~/.ssh/known_hosts

      - name: Add ansible vault pass file
        run: |
          echo "${{ secrets.ANSIBLE_VAULT_PASS }}" > .vault_pass.txt

      - name: Run Ansible Playbook
        run: |
          if [ ${{ github.event.workflow_run.head_branch }} == "main" ]; then
            PLAYBOOK=galaxy-labs_engine_playbook.yml
          else
            PLAYBOOK=labs_engine_dev_playbook.yml
          fi
          ansible-galaxy install -p roles -r requirements.yml
          ansible-playbook -i hosts $PLAYBOOK --tags update
        env:
          ANSIBLE_HOST_KEY_CHECKING: 'False'
          ANSIBLE_REMOTE_USER: ${{ secrets.SSH_USER }}
          ANSIBLE_PRIVATE_KEY_FILE: ~/.ssh/galaxy
